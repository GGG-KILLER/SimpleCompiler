// <auto-generated />

#nullable enable


namespace SimpleCompiler.MIR
{
    public abstract partial class Statement : global::SimpleCompiler.MIR.MirNode
    {

        internal Statement(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }







    }
    public partial class StatementList : global::SimpleCompiler.MIR.Statement
    {
        private global::SimpleCompiler.MIR.MirNode? _statements;

        internal StatementList(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.StatementList)this.Green).OriginalNode;
        public  global::SimpleCompiler.MIR.ScopeInfo? ScopeInfo => ((global::SimpleCompiler.MIR.Internal.StatementList)this.Green).ScopeInfo;
            public global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Statement> Statements => new global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Statement>(GetRed(ref this._statements, 0));

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                index == 0 ? GetRed(ref this._statements, 1) : null;

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitStatementList(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitStatementList(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitStatementList(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitStatementList(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitStatementList(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.StatementList Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Statement> statements,
            global::SimpleCompiler.MIR.ScopeInfo? scopeInfo
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.Statements != statements
                || this.ScopeInfo != scopeInfo
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.StatementList(
                    originalNode,
                    statements,
                    scopeInfo
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.StatementList WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.Statements,
                this.ScopeInfo
            );
        public global::SimpleCompiler.MIR.StatementList WithStatements(global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Statement> statements) =>
            this.Update(
                this.OriginalNode,
                statements,
                this.ScopeInfo
            );
        public global::SimpleCompiler.MIR.StatementList WithScopeInfo(global::SimpleCompiler.MIR.ScopeInfo? scopeInfo) =>
            this.Update(
                this.OriginalNode,
                this.Statements,
                scopeInfo
            );
    }
    public partial class ExpressionStatement : global::SimpleCompiler.MIR.Statement
    {
        private global::SimpleCompiler.MIR.Expression? _expression;

        internal ExpressionStatement(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.ExpressionStatement)this.Green).OriginalNode;
        public global::SimpleCompiler.MIR.Expression Expression => GetRed(ref this._expression, 0)!;

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                index == 0 ? GetRed(ref this._expression, 1)! : null;

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitExpressionStatement(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitExpressionStatement(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitExpressionStatement(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitExpressionStatement(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitExpressionStatement(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.ExpressionStatement Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.Expression expression
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.Expression != expression
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.ExpressionStatement(
                    originalNode,
                    expression
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.ExpressionStatement WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.Expression
            );
        public global::SimpleCompiler.MIR.ExpressionStatement WithExpression(global::SimpleCompiler.MIR.Expression expression) =>
            this.Update(
                this.OriginalNode,
                expression
            );
    }
    public partial class EmptyStatement : global::SimpleCompiler.MIR.Statement
    {

        internal EmptyStatement(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.EmptyStatement)this.Green).OriginalNode;

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                null;

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitEmptyStatement(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitEmptyStatement(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitEmptyStatement(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitEmptyStatement(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitEmptyStatement(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.EmptyStatement Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode
        )
        {
            if (
                this.OriginalNode != originalNode
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.EmptyStatement(
                    originalNode
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.EmptyStatement WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode
            );
    }
    public partial class AssignmentStatement : global::SimpleCompiler.MIR.Statement
    {
        private global::SimpleCompiler.MIR.MirNode? _assignees;
        private global::SimpleCompiler.MIR.MirNode? _values;

        internal AssignmentStatement(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.AssignmentStatement)this.Green).OriginalNode;
            public global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> Assignees => new global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression>(GetRed(ref this._assignees, 0));
            public global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> Values => new global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression>(GetRed(ref this._values, 1));

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                index switch
                {
                    0 => GetRed(ref this._assignees, 0),
                    1 => GetRed(ref this._values, 1),
                    _ => null
                };

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitAssignmentStatement(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitAssignmentStatement(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitAssignmentStatement(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitAssignmentStatement(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitAssignmentStatement(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.AssignmentStatement Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> assignees,
            global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> values
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.Assignees != assignees
                || this.Values != values
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.AssignmentStatement(
                    originalNode,
                    assignees,
                    values
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.AssignmentStatement WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.Assignees,
                this.Values
            );
        public global::SimpleCompiler.MIR.AssignmentStatement WithAssignees(global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> assignees) =>
            this.Update(
                this.OriginalNode,
                assignees,
                this.Values
            );
        public global::SimpleCompiler.MIR.AssignmentStatement WithValues(global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> values) =>
            this.Update(
                this.OriginalNode,
                this.Assignees,
                values
            );
    }
    public abstract partial class Expression : global::SimpleCompiler.MIR.MirNode
    {

        internal Expression(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public abstract global::SimpleCompiler.MIR.ResultKind ResultKind { get; }






    }
    public partial class VariableExpression : global::SimpleCompiler.MIR.Expression
    {

        internal VariableExpression(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.VariableExpression)this.Green).OriginalNode;
        public override  global::SimpleCompiler.MIR.ResultKind ResultKind => ((global::SimpleCompiler.MIR.Internal.VariableExpression)this.Green).ResultKind;
        public  global::SimpleCompiler.MIR.VariableInfo VariableInfo => ((global::SimpleCompiler.MIR.Internal.VariableExpression)this.Green).VariableInfo;

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                null;

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitVariableExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitVariableExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitVariableExpression(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitVariableExpression(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitVariableExpression(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.VariableExpression Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.ResultKind resultKind,
            global::SimpleCompiler.MIR.VariableInfo variableInfo
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.ResultKind != resultKind
                || this.VariableInfo != variableInfo
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.VariableExpression(
                    originalNode,
                    resultKind,
                    variableInfo
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.VariableExpression WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.ResultKind,
                this.VariableInfo
            );
        public global::SimpleCompiler.MIR.VariableExpression WithResultKind(global::SimpleCompiler.MIR.ResultKind resultKind) =>
            this.Update(
                this.OriginalNode,
                resultKind,
                this.VariableInfo
            );
        public global::SimpleCompiler.MIR.VariableExpression WithVariableInfo(global::SimpleCompiler.MIR.VariableInfo variableInfo) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                variableInfo
            );
    }
    public partial class UnaryOperationExpression : global::SimpleCompiler.MIR.Expression
    {
        private global::SimpleCompiler.MIR.Expression? _operand;

        internal UnaryOperationExpression(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.UnaryOperationExpression)this.Green).OriginalNode;
        public override  global::SimpleCompiler.MIR.ResultKind ResultKind => ((global::SimpleCompiler.MIR.Internal.UnaryOperationExpression)this.Green).ResultKind;
        public  global::SimpleCompiler.MIR.UnaryOperationKind UnaryOperationKind => ((global::SimpleCompiler.MIR.Internal.UnaryOperationExpression)this.Green).UnaryOperationKind;
        public global::SimpleCompiler.MIR.Expression Operand => GetRed(ref this._operand, 0)!;

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                index == 0 ? GetRed(ref this._operand, 1)! : null;

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitUnaryOperationExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitUnaryOperationExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitUnaryOperationExpression(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitUnaryOperationExpression(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitUnaryOperationExpression(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.UnaryOperationExpression Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.ResultKind resultKind,
            global::SimpleCompiler.MIR.UnaryOperationKind unaryOperationKind,
            global::SimpleCompiler.MIR.Expression operand
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.ResultKind != resultKind
                || this.UnaryOperationKind != unaryOperationKind
                || this.Operand != operand
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.UnaryOperationExpression(
                    originalNode,
                    resultKind,
                    unaryOperationKind,
                    operand
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.UnaryOperationExpression WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.ResultKind,
                this.UnaryOperationKind,
                this.Operand
            );
        public global::SimpleCompiler.MIR.UnaryOperationExpression WithResultKind(global::SimpleCompiler.MIR.ResultKind resultKind) =>
            this.Update(
                this.OriginalNode,
                resultKind,
                this.UnaryOperationKind,
                this.Operand
            );
        public global::SimpleCompiler.MIR.UnaryOperationExpression WithUnaryOperationKind(global::SimpleCompiler.MIR.UnaryOperationKind unaryOperationKind) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                unaryOperationKind,
                this.Operand
            );
        public global::SimpleCompiler.MIR.UnaryOperationExpression WithOperand(global::SimpleCompiler.MIR.Expression operand) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                this.UnaryOperationKind,
                operand
            );
    }
    public partial class FunctionCallExpression : global::SimpleCompiler.MIR.Expression
    {
        private global::SimpleCompiler.MIR.Expression? _callee;
        private global::SimpleCompiler.MIR.MirNode? _arguments;

        internal FunctionCallExpression(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.FunctionCallExpression)this.Green).OriginalNode;
        public override  global::SimpleCompiler.MIR.ResultKind ResultKind => ((global::SimpleCompiler.MIR.Internal.FunctionCallExpression)this.Green).ResultKind;
        public global::SimpleCompiler.MIR.Expression Callee => GetRed(ref this._callee, 0)!;
            public global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> Arguments => new global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression>(GetRed(ref this._arguments, 1));

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                index switch
                {
                    0 => GetRed(ref this._callee, 0)!,
                    1 => GetRed(ref this._arguments, 1),
                    _ => null
                };

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitFunctionCallExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitFunctionCallExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitFunctionCallExpression(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitFunctionCallExpression(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitFunctionCallExpression(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.FunctionCallExpression Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.ResultKind resultKind,
            global::SimpleCompiler.MIR.Expression callee,
            global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> arguments
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.ResultKind != resultKind
                || this.Callee != callee
                || this.Arguments != arguments
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.FunctionCallExpression(
                    originalNode,
                    resultKind,
                    callee,
                    arguments
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.FunctionCallExpression WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.ResultKind,
                this.Callee,
                this.Arguments
            );
        public global::SimpleCompiler.MIR.FunctionCallExpression WithResultKind(global::SimpleCompiler.MIR.ResultKind resultKind) =>
            this.Update(
                this.OriginalNode,
                resultKind,
                this.Callee,
                this.Arguments
            );
        public global::SimpleCompiler.MIR.FunctionCallExpression WithCallee(global::SimpleCompiler.MIR.Expression callee) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                callee,
                this.Arguments
            );
        public global::SimpleCompiler.MIR.FunctionCallExpression WithArguments(global::SimpleCompiler.MIR.MirList<global::SimpleCompiler.MIR.Expression> arguments) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                this.Callee,
                arguments
            );
    }
    public partial class DiscardExpression : global::SimpleCompiler.MIR.Expression
    {

        internal DiscardExpression(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.DiscardExpression)this.Green).OriginalNode;
        public override  global::SimpleCompiler.MIR.ResultKind ResultKind => ((global::SimpleCompiler.MIR.Internal.DiscardExpression)this.Green).ResultKind;

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                null;

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitDiscardExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitDiscardExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitDiscardExpression(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitDiscardExpression(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitDiscardExpression(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.DiscardExpression Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.ResultKind resultKind
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.ResultKind != resultKind
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.DiscardExpression(
                    originalNode,
                    resultKind
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.DiscardExpression WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.ResultKind
            );
        public global::SimpleCompiler.MIR.DiscardExpression WithResultKind(global::SimpleCompiler.MIR.ResultKind resultKind) =>
            this.Update(
                this.OriginalNode,
                resultKind
            );
    }
    public partial class ConstantExpression : global::SimpleCompiler.MIR.Expression
    {

        internal ConstantExpression(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.ConstantExpression)this.Green).OriginalNode;
        public override  global::SimpleCompiler.MIR.ResultKind ResultKind => ((global::SimpleCompiler.MIR.Internal.ConstantExpression)this.Green).ResultKind;
        public  global::SimpleCompiler.MIR.ConstantKind ConstantKind => ((global::SimpleCompiler.MIR.Internal.ConstantExpression)this.Green).ConstantKind;
        public  object Value => ((global::SimpleCompiler.MIR.Internal.ConstantExpression)this.Green).Value;

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                null;

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitConstantExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitConstantExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitConstantExpression(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitConstantExpression(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitConstantExpression(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.ConstantExpression Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.ResultKind resultKind,
            global::SimpleCompiler.MIR.ConstantKind constantKind,
            object value
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.ResultKind != resultKind
                || this.ConstantKind != constantKind
                || this.Value != value
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.ConstantExpression(
                    originalNode,
                    resultKind,
                    constantKind,
                    value
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.ConstantExpression WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.ResultKind,
                this.ConstantKind,
                this.Value
            );
        public global::SimpleCompiler.MIR.ConstantExpression WithResultKind(global::SimpleCompiler.MIR.ResultKind resultKind) =>
            this.Update(
                this.OriginalNode,
                resultKind,
                this.ConstantKind,
                this.Value
            );
        public global::SimpleCompiler.MIR.ConstantExpression WithConstantKind(global::SimpleCompiler.MIR.ConstantKind constantKind) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                constantKind,
                this.Value
            );
        public global::SimpleCompiler.MIR.ConstantExpression WithValue(object value) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                this.ConstantKind,
                value
            );
    }
    public partial class BinaryOperationExpression : global::SimpleCompiler.MIR.Expression
    {
        private global::SimpleCompiler.MIR.Expression? _left;
        private global::SimpleCompiler.MIR.Expression? _right;

        internal BinaryOperationExpression(global::SimpleCompiler.MIR.Internal.MirNode green, global::SimpleCompiler.MIR.MirNode? parent)
            : base(green, parent)
        {
        }

        public override  global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => ((global::SimpleCompiler.MIR.Internal.BinaryOperationExpression)this.Green).OriginalNode;
        public override  global::SimpleCompiler.MIR.ResultKind ResultKind => ((global::SimpleCompiler.MIR.Internal.BinaryOperationExpression)this.Green).ResultKind;
        public  global::SimpleCompiler.MIR.BinaryOperationKind BinaryOperationKind => ((global::SimpleCompiler.MIR.Internal.BinaryOperationExpression)this.Green).BinaryOperationKind;
        public global::SimpleCompiler.MIR.Expression Left => GetRed(ref this._left, 0)!;
        public global::SimpleCompiler.MIR.Expression Right => GetRed(ref this._right, 1)!;

        internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index) =>
                index switch
                {
                    0 => GetRed(ref this._left, 0)!,
                    1 => GetRed(ref this._right, 1)!,
                    _ => null
                };

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.MIR.MirVisitor visitor) =>
            visitor.VisitBinaryOperationExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.MIR.MirVisitor<TResult> visitor) =>
            visitor.VisitBinaryOperationExpression(this);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, TResult> visitor, T1 arg1) =>
            visitor.VisitBinaryOperationExpression(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.VisitBinaryOperationExpression(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.VisitBinaryOperationExpression(this, arg1, arg2, arg3);

        public global::SimpleCompiler.MIR.BinaryOperationExpression Update(
            global::Loretta.CodeAnalysis.SyntaxReference? originalNode,
            global::SimpleCompiler.MIR.ResultKind resultKind,
            global::SimpleCompiler.MIR.BinaryOperationKind binaryOperationKind,
            global::SimpleCompiler.MIR.Expression left,
            global::SimpleCompiler.MIR.Expression right
        )
        {
            if (
                this.OriginalNode != originalNode
                || this.ResultKind != resultKind
                || this.BinaryOperationKind != binaryOperationKind
                || this.Left != left
                || this.Right != right
            )
            {
                return global::SimpleCompiler.MIR.MirFactory.BinaryOperationExpression(
                    originalNode,
                    resultKind,
                    binaryOperationKind,
                    left,
                    right
                );
            }

            return this;
        }

        public global::SimpleCompiler.MIR.BinaryOperationExpression WithOriginalNode(global::Loretta.CodeAnalysis.SyntaxReference? originalNode) =>
            this.Update(
                originalNode,
                this.ResultKind,
                this.BinaryOperationKind,
                this.Left,
                this.Right
            );
        public global::SimpleCompiler.MIR.BinaryOperationExpression WithResultKind(global::SimpleCompiler.MIR.ResultKind resultKind) =>
            this.Update(
                this.OriginalNode,
                resultKind,
                this.BinaryOperationKind,
                this.Left,
                this.Right
            );
        public global::SimpleCompiler.MIR.BinaryOperationExpression WithBinaryOperationKind(global::SimpleCompiler.MIR.BinaryOperationKind binaryOperationKind) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                binaryOperationKind,
                this.Left,
                this.Right
            );
        public global::SimpleCompiler.MIR.BinaryOperationExpression WithLeft(global::SimpleCompiler.MIR.Expression left) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                this.BinaryOperationKind,
                left,
                this.Right
            );
        public global::SimpleCompiler.MIR.BinaryOperationExpression WithRight(global::SimpleCompiler.MIR.Expression right) =>
            this.Update(
                this.OriginalNode,
                this.ResultKind,
                this.BinaryOperationKind,
                this.Left,
                right
            );
    }
}