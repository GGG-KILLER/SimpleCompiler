// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.MIR.Internal
{
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;

    abstract partial class MirNode
    {
        public const global::SimpleCompiler.MIR.MirKind ListKind = global::SimpleCompiler.MIR.MirKind.List;

        protected readonly global::SimpleCompiler.MIR.MirKind _kind;
        private byte _slotCount;

        protected MirNode(global::SimpleCompiler.MIR.MirKind kind, global::Loretta.CodeAnalysis.SyntaxReference? originalNode)
        {
            this._kind = kind;
            this._originalNode = originalNode;
        }

        public global::SimpleCompiler.MIR.MirKind Kind => this._kind;
        public global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => this._originalNode;

        public int SlotCount
        {
            get
            {
                int count = this._slotCount;
                if (count == byte.MaxValue)
                    count = this.GetSlotCount();
                return count;
            }
            protected set => _slotCount = (byte) value;
        }

        public bool IsList => this._kind == ListKind;

        public abstract global::SimpleCompiler.MIR.Internal.MirNode? GetSlot(int index);

        public global::SimpleCompiler.MIR.Internal.MirNode GetRequiredSlot(int index)
        {
            var node = this.GetSlot(index);
            Debug.Assert(node != null);
            return node!;
        }

        protected virtual int GetSlotCount() => _slotCount;

        public global::SimpleCompiler.MIR.Internal.ChildMirList ChildNodes() =>
            new global::SimpleCompiler.MIR.Internal.ChildMirList(this);

        public IEnumerable<global::SimpleCompiler.MIR.Internal.MirNode> EnumerateDescendants()
        {
            yield return this;

            var stack = new Stack<global::SimpleCompiler.MIR.Internal.ChildMirList.Enumerator>(24);
            stack.Push(ChildNodes().GetEnumerator());

            while (stack.Count > 0)
            {
                var en = stack.Pop();
                if (!en.MoveNext())
                {
                    // no more down this branch
                    continue;
                }

                var current = en.Current;
                stack.Push(en); // put it back on stack (struct enumerator)

                yield return current;

                stack.Push(current.ChildNodes().GetEnumerator());
                continue;
            }
        }

        public virtual bool IsEquivalentTo([NotNullWhen(true)] global::SimpleCompiler.MIR.Internal.MirNode? other)
        {
            if (this == other) return true;
            if (other == null) return false;
            if (this.Kind != other.Kind) return false;
            if (this.OriginalNode != other.OriginalNode) return false;

            var n = this.SlotCount;
            if (n != other.SlotCount) return false;

            for (int i = 0; i < n; i++)
            {
                var thisChild = this.GetSlot(i);
                var otherChild = other.GetSlot(i);
                if (thisChild != null && otherChild != null && !thisChild.IsEquivalentTo(otherChild))
                {
                    return false;
                }
            }

            return true;
        }

        /*
         * There are 3 overloads of this, because most callers already know what they have is a List<T> and only transform it.
         * In those cases List<TFrom> performs much better.
         * In other cases, the type is unknown / is IEnumerable<T>, where we try to find the best match.
         * There is another overload for IReadOnlyList, since most collections already implement this, so checking for it will
         * perform better then copying to a List<T>, though not as good as List<T> directly.
         */
        public static global::SimpleCompiler.MIR.Internal.MirNode? CreateList<TFrom>(IEnumerable<TFrom>? enumerable, Func<TFrom, global::SimpleCompiler.MIR.Internal.MirNode> select)
            => enumerable switch
            {
                null => null,
                List<TFrom> l => CreateList(l, select),
                IReadOnlyList<TFrom> l => CreateList(l, select),
                _ => CreateList(enumerable.ToList(), select)
            };

        public static global::SimpleCompiler.MIR.Internal.MirNode? CreateList<TFrom>(List<TFrom> list, Func<TFrom, global::SimpleCompiler.MIR.Internal.MirNode> select)
        {
            switch (list.Count)
            {
                case 0:
                    return null;
                case 1:
                    return select(list[0]);
                case 2:
                    return global::SimpleCompiler.MIR.Internal.MirList.List(select(list[0]), select(list[1]));
                case 3:
                    return global::SimpleCompiler.MIR.Internal.MirList.List(select(list[0]), select(list[1]), select(list[2]));
                default:
                {
                    var array = new global::SimpleCompiler.MIR.Internal.MirNode[list.Count];
                    for (int i = 0; i < array.Length; i++)
                        array[i] = select(list[i]);
                    return global::SimpleCompiler.MIR.Internal.MirList.List(array);
                }
            }
        }

        public static global::SimpleCompiler.MIR.Internal.MirNode? CreateList<TFrom>(IReadOnlyList<TFrom> list, Func<TFrom, global::SimpleCompiler.MIR.Internal.MirNode> select)
        {
            switch (list.Count)
            {
                case 0:
                    return null;
                case 1:
                    return select(list[0]);
                case 2:
                    return MirList.List(select(list[0]), select(list[1]));
                case 3:
                    return MirList.List(select(list[0]), select(list[1]), select(list[2]));
                default:
                {
                    var array = new global::SimpleCompiler.MIR.Internal.MirNode[list.Count];
                    for (int i = 0; i < array.Length; i++)
                        array[i] = select(list[i]);
                    return MirList.List(array);
                }
            }
        }

        public global::SimpleCompiler.MIR.MirNode CreateRed() => this.CreateRed(null);
        public abstract global::SimpleCompiler.MIR.MirNode CreateRed(global::SimpleCompiler.MIR.MirNode? parent);

        public abstract void Accept(global::SimpleCompiler.MIR.Internal.MirVisitor visitor);
        public abstract TResult? Accept<TResult>(global::SimpleCompiler.MIR.Internal.MirVisitor<TResult> visitor);
        public abstract TResult? Accept<T1, TResult>(global::SimpleCompiler.MIR.Internal.MirVisitor<T1, TResult> visitor, T1 arg1);
        public abstract TResult? Accept<T1, T2, TResult>(global::SimpleCompiler.MIR.Internal.MirVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2);
        public abstract TResult? Accept<T1, T2, T3, TResult>(global::SimpleCompiler.MIR.Internal.MirVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3);
    }
}