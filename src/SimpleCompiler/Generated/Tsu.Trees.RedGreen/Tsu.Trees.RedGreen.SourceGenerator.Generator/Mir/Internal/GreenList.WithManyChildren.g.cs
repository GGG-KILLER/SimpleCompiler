// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.MIR.Internal
{
    internal partial class MirList
    {
        internal sealed class WithManyChildren : MirList
        {
            internal readonly global::SimpleCompiler.MIR.Internal.MirNode[] children;

            internal WithManyChildren(global::SimpleCompiler.MIR.Internal.MirNode[] children)
            {
                this.children = children;
                int n = children.Length;
                if (n < byte.MaxValue)
                {
                    SlotCount = (byte) n;
                }
                else
                {
                    SlotCount = byte.MaxValue;
                }
            }

            protected override int GetSlotCount() => children.Length;

            public override global::SimpleCompiler.MIR.Internal.MirNode GetSlot(int index) => children[index];

            internal override void CopyTo(global::SimpleCompiler.MIR.Internal.MirNode[] array, int offset) =>
                Array.Copy(children, 0, array, offset, children.Length);

            public override global::SimpleCompiler.MIR.MirNode CreateRed(global::SimpleCompiler.MIR.MirNode? parent) =>
                new global::SimpleCompiler.MIR.MirList.WithManyChildren(this, parent);
        }
    }
}
