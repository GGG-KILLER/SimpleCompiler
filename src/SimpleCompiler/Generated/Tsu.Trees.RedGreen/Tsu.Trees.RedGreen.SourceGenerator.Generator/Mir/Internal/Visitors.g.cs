// <auto-generated />

#nullable enable

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace SimpleCompiler.MIR.Internal
{

    internal static partial class MirFactory
    {
        public static global::SimpleCompiler.MIR.Internal.MirNone MirNone()
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.MirNone(global::SimpleCompiler.MIR.MirKind.None, default);
        }

        public static global::SimpleCompiler.MIR.Internal.MirNone MirNone(global::Loretta.CodeAnalysis.SyntaxReference? originalNode)
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.MirNone(global::SimpleCompiler.MIR.MirKind.None, originalNode);
        }

        public static global::SimpleCompiler.MIR.Internal.BinaryOperationExpression BinaryOperationExpression(global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.BinaryOperationKind binaryOperationKind, global::SimpleCompiler.MIR.Internal.Expression left, global::SimpleCompiler.MIR.Internal.Expression right)
        {
#if DEBUG
            if (left == null) throw new global::System.ArgumentNullException(nameof(left));
            if (right == null) throw new global::System.ArgumentNullException(nameof(right));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.BinaryOperationExpression(global::SimpleCompiler.MIR.MirKind.BinaryOperationExpression, default, resultKind, binaryOperationKind, left, right);
        }

        public static global::SimpleCompiler.MIR.Internal.BinaryOperationExpression BinaryOperationExpression(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.BinaryOperationKind binaryOperationKind, global::SimpleCompiler.MIR.Internal.Expression left, global::SimpleCompiler.MIR.Internal.Expression right)
        {
#if DEBUG
            if (left == null) throw new global::System.ArgumentNullException(nameof(left));
            if (right == null) throw new global::System.ArgumentNullException(nameof(right));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.BinaryOperationExpression(global::SimpleCompiler.MIR.MirKind.BinaryOperationExpression, originalNode, resultKind, binaryOperationKind, left, right);
        }

        public static global::SimpleCompiler.MIR.Internal.ConstantExpression ConstantExpression(global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.ConstantKind constantKind, object value)
        {
#if DEBUG
            if (value == null) throw new global::System.ArgumentNullException(nameof(value));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.ConstantExpression(global::SimpleCompiler.MIR.MirKind.ConstantExpression, default, resultKind, constantKind, value);
        }

        public static global::SimpleCompiler.MIR.Internal.ConstantExpression ConstantExpression(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.ConstantKind constantKind, object value)
        {
#if DEBUG
            if (value == null) throw new global::System.ArgumentNullException(nameof(value));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.ConstantExpression(global::SimpleCompiler.MIR.MirKind.ConstantExpression, originalNode, resultKind, constantKind, value);
        }

        public static global::SimpleCompiler.MIR.Internal.DiscardExpression DiscardExpression(global::SimpleCompiler.MIR.ResultKind resultKind)
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.DiscardExpression(global::SimpleCompiler.MIR.MirKind.DiscardExpression, default, resultKind);
        }

        public static global::SimpleCompiler.MIR.Internal.DiscardExpression DiscardExpression(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.ResultKind resultKind)
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.DiscardExpression(global::SimpleCompiler.MIR.MirKind.DiscardExpression, originalNode, resultKind);
        }

        public static global::SimpleCompiler.MIR.Internal.FunctionCallExpression FunctionCallExpression(global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.Internal.Expression callee)
        {
#if DEBUG
            if (callee == null) throw new global::System.ArgumentNullException(nameof(callee));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.FunctionCallExpression(global::SimpleCompiler.MIR.MirKind.FunctionCallExpression, default, resultKind, callee, default);
        }

        public static global::SimpleCompiler.MIR.Internal.FunctionCallExpression FunctionCallExpression(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.Internal.Expression callee, global::SimpleCompiler.MIR.Internal.MirList<global::SimpleCompiler.MIR.Internal.Expression> arguments)
        {
#if DEBUG
            if (callee == null) throw new global::System.ArgumentNullException(nameof(callee));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.FunctionCallExpression(global::SimpleCompiler.MIR.MirKind.FunctionCallExpression, originalNode, resultKind, callee, arguments.Node);
        }

        public static global::SimpleCompiler.MIR.Internal.UnaryOperationExpression UnaryOperationExpression(global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.UnaryOperationKind unaryOperationKind, global::SimpleCompiler.MIR.Internal.Expression operand)
        {
#if DEBUG
            if (operand == null) throw new global::System.ArgumentNullException(nameof(operand));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.UnaryOperationExpression(global::SimpleCompiler.MIR.MirKind.UnaryOperationExpression, default, resultKind, unaryOperationKind, operand);
        }

        public static global::SimpleCompiler.MIR.Internal.UnaryOperationExpression UnaryOperationExpression(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.UnaryOperationKind unaryOperationKind, global::SimpleCompiler.MIR.Internal.Expression operand)
        {
#if DEBUG
            if (operand == null) throw new global::System.ArgumentNullException(nameof(operand));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.UnaryOperationExpression(global::SimpleCompiler.MIR.MirKind.UnaryOperationExpression, originalNode, resultKind, unaryOperationKind, operand);
        }

        public static global::SimpleCompiler.MIR.Internal.VariableExpression VariableExpression(global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.VariableInfo variableInfo)
        {
#if DEBUG
            if (variableInfo == null) throw new global::System.ArgumentNullException(nameof(variableInfo));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.VariableExpression(global::SimpleCompiler.MIR.MirKind.VariableExpression, default, resultKind, variableInfo);
        }

        public static global::SimpleCompiler.MIR.Internal.VariableExpression VariableExpression(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.ResultKind resultKind, global::SimpleCompiler.MIR.VariableInfo variableInfo)
        {
#if DEBUG
            if (variableInfo == null) throw new global::System.ArgumentNullException(nameof(variableInfo));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.VariableExpression(global::SimpleCompiler.MIR.MirKind.VariableExpression, originalNode, resultKind, variableInfo);
        }

        public static global::SimpleCompiler.MIR.Internal.AssignmentStatement AssignmentStatement()
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.AssignmentStatement(global::SimpleCompiler.MIR.MirKind.AssignmentStatement, default, default, default);
        }

        public static global::SimpleCompiler.MIR.Internal.AssignmentStatement AssignmentStatement(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.Internal.MirList<global::SimpleCompiler.MIR.Internal.Expression> assignees, global::SimpleCompiler.MIR.Internal.MirList<global::SimpleCompiler.MIR.Internal.Expression> values)
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.AssignmentStatement(global::SimpleCompiler.MIR.MirKind.AssignmentStatement, originalNode, assignees.Node, values.Node);
        }

        public static global::SimpleCompiler.MIR.Internal.EmptyStatement EmptyStatement()
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.EmptyStatement(global::SimpleCompiler.MIR.MirKind.EmptyStatement, default);
        }

        public static global::SimpleCompiler.MIR.Internal.EmptyStatement EmptyStatement(global::Loretta.CodeAnalysis.SyntaxReference? originalNode)
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.EmptyStatement(global::SimpleCompiler.MIR.MirKind.EmptyStatement, originalNode);
        }

        public static global::SimpleCompiler.MIR.Internal.ExpressionStatement ExpressionStatement(global::SimpleCompiler.MIR.Internal.Expression expression)
        {
#if DEBUG
            if (expression == null) throw new global::System.ArgumentNullException(nameof(expression));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.ExpressionStatement(global::SimpleCompiler.MIR.MirKind.ExpressionStatement, default, expression);
        }

        public static global::SimpleCompiler.MIR.Internal.ExpressionStatement ExpressionStatement(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.Internal.Expression expression)
        {
#if DEBUG
            if (expression == null) throw new global::System.ArgumentNullException(nameof(expression));
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.ExpressionStatement(global::SimpleCompiler.MIR.MirKind.ExpressionStatement, originalNode, expression);
        }

        public static global::SimpleCompiler.MIR.Internal.StatementList StatementList()
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.StatementList(global::SimpleCompiler.MIR.MirKind.StatementList, default, default, default);
        }

        public static global::SimpleCompiler.MIR.Internal.StatementList StatementList(global::Loretta.CodeAnalysis.SyntaxReference? originalNode, global::SimpleCompiler.MIR.Internal.MirList<global::SimpleCompiler.MIR.Internal.Statement> statements, global::SimpleCompiler.MIR.ScopeInfo? scopeInfo)
        {
#if DEBUG
#endif // DEBUG

            return new global::SimpleCompiler.MIR.Internal.StatementList(global::SimpleCompiler.MIR.MirKind.StatementList, originalNode, statements.Node, scopeInfo);
        }
    }


    internal partial class MirVisitor
    {
        public virtual void Visit(global::SimpleCompiler.MIR.Internal.MirNode? node)
        {
            if (node != null)
            {
                node.Accept(this);
            }
        }
        public virtual void VisitMirNone(global::SimpleCompiler.MIR.Internal.MirNone node) => this.DefaultVisit(node);
        public virtual void VisitBinaryOperationExpression(global::SimpleCompiler.MIR.Internal.BinaryOperationExpression node) => this.DefaultVisit(node);
        public virtual void VisitConstantExpression(global::SimpleCompiler.MIR.Internal.ConstantExpression node) => this.DefaultVisit(node);
        public virtual void VisitDiscardExpression(global::SimpleCompiler.MIR.Internal.DiscardExpression node) => this.DefaultVisit(node);
        public virtual void VisitFunctionCallExpression(global::SimpleCompiler.MIR.Internal.FunctionCallExpression node) => this.DefaultVisit(node);
        public virtual void VisitUnaryOperationExpression(global::SimpleCompiler.MIR.Internal.UnaryOperationExpression node) => this.DefaultVisit(node);
        public virtual void VisitVariableExpression(global::SimpleCompiler.MIR.Internal.VariableExpression node) => this.DefaultVisit(node);
        public virtual void VisitAssignmentStatement(global::SimpleCompiler.MIR.Internal.AssignmentStatement node) => this.DefaultVisit(node);
        public virtual void VisitEmptyStatement(global::SimpleCompiler.MIR.Internal.EmptyStatement node) => this.DefaultVisit(node);
        public virtual void VisitExpressionStatement(global::SimpleCompiler.MIR.Internal.ExpressionStatement node) => this.DefaultVisit(node);
        public virtual void VisitStatementList(global::SimpleCompiler.MIR.Internal.StatementList node) => this.DefaultVisit(node);
        protected virtual void DefaultVisit(global::SimpleCompiler.MIR.Internal.MirNode node) { }
    }

    internal partial class MirVisitor<TResult>
    {
        public virtual TResult? Visit(global::SimpleCompiler.MIR.Internal.MirNode? node) => node == null ? default : node.Accept(this
        );
        public virtual TResult? VisitMirNone(global::SimpleCompiler.MIR.Internal.MirNone node) => this.DefaultVisit(node);
        public virtual TResult? VisitBinaryOperationExpression(global::SimpleCompiler.MIR.Internal.BinaryOperationExpression node) => this.DefaultVisit(node);
        public virtual TResult? VisitConstantExpression(global::SimpleCompiler.MIR.Internal.ConstantExpression node) => this.DefaultVisit(node);
        public virtual TResult? VisitDiscardExpression(global::SimpleCompiler.MIR.Internal.DiscardExpression node) => this.DefaultVisit(node);
        public virtual TResult? VisitFunctionCallExpression(global::SimpleCompiler.MIR.Internal.FunctionCallExpression node) => this.DefaultVisit(node);
        public virtual TResult? VisitUnaryOperationExpression(global::SimpleCompiler.MIR.Internal.UnaryOperationExpression node) => this.DefaultVisit(node);
        public virtual TResult? VisitVariableExpression(global::SimpleCompiler.MIR.Internal.VariableExpression node) => this.DefaultVisit(node);
        public virtual TResult? VisitAssignmentStatement(global::SimpleCompiler.MIR.Internal.AssignmentStatement node) => this.DefaultVisit(node);
        public virtual TResult? VisitEmptyStatement(global::SimpleCompiler.MIR.Internal.EmptyStatement node) => this.DefaultVisit(node);
        public virtual TResult? VisitExpressionStatement(global::SimpleCompiler.MIR.Internal.ExpressionStatement node) => this.DefaultVisit(node);
        public virtual TResult? VisitStatementList(global::SimpleCompiler.MIR.Internal.StatementList node) => this.DefaultVisit(node);
        protected virtual TResult? DefaultVisit(global::SimpleCompiler.MIR.Internal.MirNode node) => default;
    }

    internal partial class MirVisitor<T1, TResult>
    {
        public virtual TResult? Visit(global::SimpleCompiler.MIR.Internal.MirNode? node, T1 arg1) => node == null ? default : node.Accept(this
        , arg1);
        public virtual TResult? VisitMirNone(global::SimpleCompiler.MIR.Internal.MirNone node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitBinaryOperationExpression(global::SimpleCompiler.MIR.Internal.BinaryOperationExpression node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitConstantExpression(global::SimpleCompiler.MIR.Internal.ConstantExpression node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitDiscardExpression(global::SimpleCompiler.MIR.Internal.DiscardExpression node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitFunctionCallExpression(global::SimpleCompiler.MIR.Internal.FunctionCallExpression node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitUnaryOperationExpression(global::SimpleCompiler.MIR.Internal.UnaryOperationExpression node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitVariableExpression(global::SimpleCompiler.MIR.Internal.VariableExpression node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitAssignmentStatement(global::SimpleCompiler.MIR.Internal.AssignmentStatement node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitEmptyStatement(global::SimpleCompiler.MIR.Internal.EmptyStatement node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitExpressionStatement(global::SimpleCompiler.MIR.Internal.ExpressionStatement node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitStatementList(global::SimpleCompiler.MIR.Internal.StatementList node, T1 arg1) => this.DefaultVisit(node, arg1);
        protected virtual TResult? DefaultVisit(global::SimpleCompiler.MIR.Internal.MirNode node, T1 arg1) => default;
    }

    internal partial class MirVisitor<T1, T2, TResult>
    {
        public virtual TResult? Visit(global::SimpleCompiler.MIR.Internal.MirNode? node, T1 arg1, T2 arg2) => node == null ? default : node.Accept(this
        , arg1, arg2);
        public virtual TResult? VisitMirNone(global::SimpleCompiler.MIR.Internal.MirNone node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitBinaryOperationExpression(global::SimpleCompiler.MIR.Internal.BinaryOperationExpression node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitConstantExpression(global::SimpleCompiler.MIR.Internal.ConstantExpression node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitDiscardExpression(global::SimpleCompiler.MIR.Internal.DiscardExpression node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitFunctionCallExpression(global::SimpleCompiler.MIR.Internal.FunctionCallExpression node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitUnaryOperationExpression(global::SimpleCompiler.MIR.Internal.UnaryOperationExpression node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitVariableExpression(global::SimpleCompiler.MIR.Internal.VariableExpression node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitAssignmentStatement(global::SimpleCompiler.MIR.Internal.AssignmentStatement node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitEmptyStatement(global::SimpleCompiler.MIR.Internal.EmptyStatement node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitExpressionStatement(global::SimpleCompiler.MIR.Internal.ExpressionStatement node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitStatementList(global::SimpleCompiler.MIR.Internal.StatementList node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        protected virtual TResult? DefaultVisit(global::SimpleCompiler.MIR.Internal.MirNode node, T1 arg1, T2 arg2) => default;
    }

    internal partial class MirVisitor<T1, T2, T3, TResult>
    {
        public virtual TResult? Visit(global::SimpleCompiler.MIR.Internal.MirNode? node, T1 arg1, T2 arg2, T3 arg3) => node == null ? default : node.Accept(this
        , arg1, arg2, arg3);
        public virtual TResult? VisitMirNone(global::SimpleCompiler.MIR.Internal.MirNone node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitBinaryOperationExpression(global::SimpleCompiler.MIR.Internal.BinaryOperationExpression node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitConstantExpression(global::SimpleCompiler.MIR.Internal.ConstantExpression node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitDiscardExpression(global::SimpleCompiler.MIR.Internal.DiscardExpression node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitFunctionCallExpression(global::SimpleCompiler.MIR.Internal.FunctionCallExpression node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitUnaryOperationExpression(global::SimpleCompiler.MIR.Internal.UnaryOperationExpression node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitVariableExpression(global::SimpleCompiler.MIR.Internal.VariableExpression node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitAssignmentStatement(global::SimpleCompiler.MIR.Internal.AssignmentStatement node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitEmptyStatement(global::SimpleCompiler.MIR.Internal.EmptyStatement node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitExpressionStatement(global::SimpleCompiler.MIR.Internal.ExpressionStatement node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitStatementList(global::SimpleCompiler.MIR.Internal.StatementList node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        protected virtual TResult? DefaultVisit(global::SimpleCompiler.MIR.Internal.MirNode node, T1 arg1, T2 arg2, T3 arg3) => default;
    }


    internal partial class MirRewriter : global::SimpleCompiler.MIR.Internal.MirVisitor<global::SimpleCompiler.MIR.Internal.MirNode>
    {
        public global::SimpleCompiler.MIR.Internal.MirList<TNode> VisitList<TNode>(global::SimpleCompiler.MIR.Internal.MirList<TNode> list) where TNode : global::SimpleCompiler.MIR.Internal.MirNode
        {
            global::SimpleCompiler.MIR.Internal.MirListBuilder? alternate = null;
            for (int i = 0, n = list.Count; i < n; i++)
            {
                var item = list[i];
                var visited = Visit(item);
                if (item != visited && alternate == null)
                {
                    alternate = new global::SimpleCompiler.MIR.Internal.MirListBuilder(n);
                    alternate.AddRange(list, 0, i);
                }

                if (alternate != null && visited != null && visited.Kind != global::SimpleCompiler.MIR.MirKind.None)
                {
                    alternate.Add(visited);
                }
            }

            if (alternate != null)
            {
                return alternate.ToList();
            }

            return list;
        }

        public override global::SimpleCompiler.MIR.Internal.MirNode VisitMirNone(global::SimpleCompiler.MIR.Internal.MirNone node) =>
            node.Update(node.OriginalNode);
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitBinaryOperationExpression(global::SimpleCompiler.MIR.Internal.BinaryOperationExpression node) =>
            node.Update(node.OriginalNode, node.ResultKind, node.BinaryOperationKind, (global::SimpleCompiler.MIR.Internal.Expression?)Visit(node.Left) ?? throw new global::System.InvalidOperationException("Left cannot be null."), (global::SimpleCompiler.MIR.Internal.Expression?)Visit(node.Right) ?? throw new global::System.InvalidOperationException("Right cannot be null."));
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitConstantExpression(global::SimpleCompiler.MIR.Internal.ConstantExpression node) =>
            node.Update(node.OriginalNode, node.ResultKind, node.ConstantKind, node.Value);
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitDiscardExpression(global::SimpleCompiler.MIR.Internal.DiscardExpression node) =>
            node.Update(node.OriginalNode, node.ResultKind);
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitFunctionCallExpression(global::SimpleCompiler.MIR.Internal.FunctionCallExpression node) =>
            node.Update(node.OriginalNode, node.ResultKind, (global::SimpleCompiler.MIR.Internal.Expression?)Visit(node.Callee) ?? throw new global::System.InvalidOperationException("Callee cannot be null."), VisitList(node.Arguments));
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitUnaryOperationExpression(global::SimpleCompiler.MIR.Internal.UnaryOperationExpression node) =>
            node.Update(node.OriginalNode, node.ResultKind, node.UnaryOperationKind, (global::SimpleCompiler.MIR.Internal.Expression?)Visit(node.Operand) ?? throw new global::System.InvalidOperationException("Operand cannot be null."));
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitVariableExpression(global::SimpleCompiler.MIR.Internal.VariableExpression node) =>
            node.Update(node.OriginalNode, node.ResultKind, node.VariableInfo);
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitAssignmentStatement(global::SimpleCompiler.MIR.Internal.AssignmentStatement node) =>
            node.Update(node.OriginalNode, VisitList(node.Assignees), VisitList(node.Values));
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitEmptyStatement(global::SimpleCompiler.MIR.Internal.EmptyStatement node) =>
            node.Update(node.OriginalNode);
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitExpressionStatement(global::SimpleCompiler.MIR.Internal.ExpressionStatement node) =>
            node.Update(node.OriginalNode, (global::SimpleCompiler.MIR.Internal.Expression?)Visit(node.Expression) ?? throw new global::System.InvalidOperationException("Expression cannot be null."));
        public override global::SimpleCompiler.MIR.Internal.MirNode VisitStatementList(global::SimpleCompiler.MIR.Internal.StatementList node) =>
            node.Update(node.OriginalNode, VisitList(node.Statements), node.ScopeInfo);
    }
}

