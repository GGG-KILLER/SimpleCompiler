// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.MIR
{
    // This is supposed to be a hidden node so it is marked as internal.
    internal abstract partial class MirList : global::SimpleCompiler.MIR.MirNode
    {
        // This is supposed to be a hidden node so it is marked as internal.
        internal class WithThreeChildren : MirList
        {
            private global::SimpleCompiler.MIR.MirNode? _child0;
            private global::SimpleCompiler.MIR.MirNode? _child1;
            private global::SimpleCompiler.MIR.MirNode? _child2;

            internal WithThreeChildren(global::SimpleCompiler.MIR.Internal.MirList green, global::SimpleCompiler.MIR.MirNode? parent)
                : base(green, parent)
            {
            }

            internal override global::SimpleCompiler.MIR.MirNode? GetNodeSlot(int index)
            {
                return index switch
                {
                    0 => GetRedElement(ref _child0, 0),
                    1 => GetRedElement(ref _child1, 1),
                    2 => GetRedElement(ref _child2, 2),
                    _ => null,
                };
            }
        }
    }
}
