// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.IR
{
    // This is supposed to be a hidden node so it is marked as internal.
    internal abstract partial class IrList : global::SimpleCompiler.IR.IrNode
    {
        internal IrList(global::SimpleCompiler.IR.Internal.IrList green, global::SimpleCompiler.IR.IrNode? parent)
            : base(green, parent)
        {
        }

        public override global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode => throw new global::System.InvalidOperationException("Unreachable.");

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(global::SimpleCompiler.IR.IrVisitor visitor) =>
            throw new global::System.InvalidOperationException("A list must not be visited directly.");

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(global::SimpleCompiler.IR.IrVisitor<TResult> visitor) =>
            throw new global::System.InvalidOperationException("A list must not be visited directly.");

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(global::SimpleCompiler.IR.IrVisitor<T1, TResult> visitor, T1 arg1) =>
            throw new global::System.InvalidOperationException("A list must not be visited directly.");

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(global::SimpleCompiler.IR.IrVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            throw new global::System.InvalidOperationException("A list must not be visited directly.");

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(global::SimpleCompiler.IR.IrVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            throw new global::System.InvalidOperationException("A list must not be visited directly.");
    }
}
