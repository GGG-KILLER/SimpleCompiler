// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.IR
{
    // This is supposed to be a hidden node so it is marked as internal.
    internal abstract partial class IrList : global::SimpleCompiler.IR.IrNode
    {
        // This is supposed to be a hidden node so it is marked as internal.
        internal class WithManyChildren : IrList
        {
            private global::SimpleCompiler.IR.IrNode?[] _children;

            internal WithManyChildren(global::SimpleCompiler.IR.Internal.IrList green, global::SimpleCompiler.IR.IrNode? parent)
                : base(green, parent)
            {
                _children = new global::SimpleCompiler.IR.IrNode?[green.SlotCount];
            }

            internal override global::SimpleCompiler.IR.IrNode? GetNodeSlot(int index) =>
                GetRedElement(ref _children[index], index);
        }
    }
}
