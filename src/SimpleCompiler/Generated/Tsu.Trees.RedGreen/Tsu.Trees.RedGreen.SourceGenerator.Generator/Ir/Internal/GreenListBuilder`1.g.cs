// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.IR.Internal
{
    internal readonly struct IrListBuilder<TNode> where TNode : global::SimpleCompiler.IR.Internal.IrNode
    {
        private readonly IrListBuilder _builder;

        public IrListBuilder(int size)
            : this(new IrListBuilder(size))
        {
        }

        public static IrListBuilder<TNode> Create() => new(8);

        internal IrListBuilder(IrListBuilder builder)
        {
            _builder = builder;
        }

        public bool IsNull => _builder == null;

        public int Count => _builder.Count;

        public TNode? this[int index]
        {
            get => (TNode?) _builder[index];

            set => _builder[index] = value;
        }

        public void Clear() => _builder.Clear();

        public IrListBuilder<TNode> Add(TNode node)
        {
            _builder.Add(node);
            return this;
        }

        public void AddRange(TNode[] items, int offset, int length) =>
            _builder.AddRange(items, offset, length);

        public void AddRange(IrList<TNode> nodes) => _builder.AddRange(nodes);

        public void AddRange(IrList<TNode> nodes, int offset, int length) =>
            _builder.AddRange(nodes, offset, length);

        public bool Any(global::SimpleCompiler.IR.IrKind kind) => _builder.Any(kind);

        public IrList<TNode> ToList() => _builder.ToList();

        public global::SimpleCompiler.IR.Internal.IrNode? ToListNode() => _builder.ToListNode();

        public static implicit operator IrListBuilder(IrListBuilder<TNode> builder) => builder._builder;

        public static implicit operator IrList<TNode>(IrListBuilder<TNode> builder)
        {
            if (builder._builder != null)
            {
                return builder.ToList();
            }

            return default;
        }

        public IrList<TDerived> ToList<TDerived>() where TDerived : global::SimpleCompiler.IR.Internal.IrNode =>
            new(ToListNode());
    }
}
