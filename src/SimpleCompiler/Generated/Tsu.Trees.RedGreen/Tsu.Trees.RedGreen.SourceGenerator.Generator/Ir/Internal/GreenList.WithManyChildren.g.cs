// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.IR.Internal
{
    internal partial class IrList
    {
        internal sealed class WithManyChildren : IrList
        {
            internal readonly global::SimpleCompiler.IR.Internal.IrNode[] children;

            internal WithManyChildren(global::SimpleCompiler.IR.Internal.IrNode[] children)
            {
                this.children = children;
                int n = children.Length;
                if (n < byte.MaxValue)
                {
                    SlotCount = (byte) n;
                }
                else
                {
                    SlotCount = byte.MaxValue;
                }
            }

            protected override int GetSlotCount() => children.Length;

            public override global::SimpleCompiler.IR.Internal.IrNode GetSlot(int index) => children[index];

            internal override void CopyTo(global::SimpleCompiler.IR.Internal.IrNode[] array, int offset) =>
                Array.Copy(children, 0, array, offset, children.Length);

            public override global::SimpleCompiler.IR.IrNode CreateRed(global::SimpleCompiler.IR.IrNode? parent) =>
                new global::SimpleCompiler.IR.IrList.WithManyChildren(this, parent);
        }
    }
}
