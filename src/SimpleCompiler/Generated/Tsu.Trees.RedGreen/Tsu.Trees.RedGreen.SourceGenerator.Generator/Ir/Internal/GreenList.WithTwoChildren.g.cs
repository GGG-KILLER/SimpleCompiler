// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.IR.Internal
{
    internal partial class IrList
    {
        internal class WithTwoChildren : IrList
        {
            private readonly global::SimpleCompiler.IR.Internal.IrNode _child0;
            private readonly global::SimpleCompiler.IR.Internal.IrNode _child1;

            internal WithTwoChildren(global::SimpleCompiler.IR.Internal.IrNode child0, global::SimpleCompiler.IR.Internal.IrNode child1)
            {
                SlotCount = 2;
                _child0 = child0;
                _child1 = child1;
            }

            public override global::SimpleCompiler.IR.Internal.IrNode? GetSlot(int index)
            {
                return index switch
                {
                    0 => _child0,
                    1 => _child1,
                    _ => null,
                };
            }

            internal override void CopyTo(global::SimpleCompiler.IR.Internal.IrNode[] array, int offset)
            {
                array[offset] = _child0;
                array[offset + 1] = _child1;
            }

            public override global::SimpleCompiler.IR.IrNode CreateRed(global::SimpleCompiler.IR.IrNode? parent) =>
                new global::SimpleCompiler.IR.IrList.WithTwoChildren(this, parent);
        }
    }
}
