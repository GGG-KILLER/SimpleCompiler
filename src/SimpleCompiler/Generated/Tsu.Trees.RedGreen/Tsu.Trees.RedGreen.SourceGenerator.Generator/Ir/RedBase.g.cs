// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace SimpleCompiler.IR
{
    abstract partial class IrNode
    {
        private readonly global::SimpleCompiler.IR.IrNode? _parent;

        private protected IrNode(global::SimpleCompiler.IR.Internal.IrNode green, global::SimpleCompiler.IR.IrNode? parent)
        {
            this._parent = parent;
            this.Green = green;
        }

        public global::SimpleCompiler.IR.IrKind Kind => this.Green.Kind;
        public abstract global::Loretta.CodeAnalysis.SyntaxReference? OriginalNode { get; }
        internal global::SimpleCompiler.IR.Internal.IrNode Green { get; }
        public global::SimpleCompiler.IR.IrNode? Parent => _parent;
        internal int SlotCount => this.Green.SlotCount;
        internal bool IsList => this.Green.IsList;

        protected T? GetRed<T>(ref T? field, int index) where T : global::SimpleCompiler.IR.IrNode
        {
            var result = field;

            if (result == null)
            {
                var green = this.Green.GetSlot(index);
                if (green != null)
                {
                    global::System.Threading.Interlocked.CompareExchange(ref field, (T) green.CreateRed(this), null);
                    result = field;
                }
            }

            return result;
        }

        /// <summary>
        /// This works the same as GetRed, but intended to be used in lists
        /// The only difference is that the public parent of the node is not the list,
        /// but the list's parent. (element's grand parent).
        /// </summary>
        protected global::SimpleCompiler.IR.IrNode? GetRedElement(ref global::SimpleCompiler.IR.IrNode? element, int slot)
        {
            global::System.Diagnostics.Debug.Assert(IsList);

            var result = element;

            if (result == null)
            {
                var green = Green.GetRequiredSlot(slot);
                // passing list's parent
                global::System.Threading.Interlocked.CompareExchange(ref element, green.CreateRed(Parent), null);
                result = element;
            }

            return result;
        }

        public bool IsEquivalentTo(global::SimpleCompiler.IR.IrNode? other)
        {
            if (this == other) return true;
            if (other == null) return false;

            return this.Green.IsEquivalentTo(other.Green);
        }

        public bool Contains(global::SimpleCompiler.IR.IrNode other)
        {
            for (var node = other; node != null; node = node.Parent)
            {
                if (node == this)
                    return true;
            }

            return false;
        }

        internal abstract global::SimpleCompiler.IR.IrNode? GetNodeSlot(int index);

        internal global::SimpleCompiler.IR.IrNode GetRequiredNodeSlot(int index)
        {
            var node = this.GetNodeSlot(index);
            global::System.Diagnostics.Debug.Assert(node != null);
            return node!;
        }

        public abstract void Accept(global::SimpleCompiler.IR.IrVisitor visitor);
        public abstract TResult? Accept<TResult>(global::SimpleCompiler.IR.IrVisitor<TResult> visitor);
        public abstract TResult? Accept<T1, TResult>(global::SimpleCompiler.IR.IrVisitor<T1, TResult> visitor, T1 arg1);
        public abstract TResult? Accept<T1, T2, TResult>(global::SimpleCompiler.IR.IrVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2);
        public abstract TResult? Accept<T1, T2, T3, TResult>(global::SimpleCompiler.IR.IrVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3);

        /// <summary>
        /// The list of child nodes and tokens of this node, where each element is a SyntaxNodeOrToken instance.
        /// </summary>
        public global::SimpleCompiler.IR.ChildIrList ChildNodes() => new(this);

        public global::System.Collections.Generic.IEnumerable<global::SimpleCompiler.IR.IrNode> Ancestors() =>
            this.Parent?.AncestorsAndSelf() ?? global::System.Linq.Enumerable.Empty<global::SimpleCompiler.IR.IrNode>();

        public global::System.Collections.Generic.IEnumerable<global::SimpleCompiler.IR.IrNode> AncestorsAndSelf()
        {
            for (var node = this; node != null; node = node.Parent)
                yield return node;
        }

        public TNode? FirstAncestorOrSelf<TNode>(Func<TNode, bool>? predicate = null) where TNode : global::SimpleCompiler.IR.IrNode
        {
            for (var node = this; node != null; node = node.Parent)
            {
                if (node is TNode tnode && (predicate == null || predicate(tnode)))
                    return tnode;
            }

            return null;
        }

        public TNode? FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, bool> predicate, TArg argument) where TNode : global::SimpleCompiler.IR.IrNode
        {
            for (var node = this; node != null; node = node.Parent)
            {
                if (node is TNode tnode && (predicate == null || predicate(tnode, argument)))
                    return tnode;
            }

            return null;
        }

        public global::System.Collections.Generic.IEnumerable<global::SimpleCompiler.IR.IrNode> DescendantNodes(Func<global::SimpleCompiler.IR.IrNode, bool>? descendIntoChildren = null)
        {
            var stack = new Stack<global::SimpleCompiler.IR.IrNode>(24);
            foreach (var child in this.ChildNodes())
                stack.Push(child);

            while (stack.Count > 0)
            {
                var current = stack.Pop();

                yield return current;

                foreach (var child in current.ChildNodes().Reverse())
                {
                    stack.Push(child);
                }
            }
        }

        public global::System.Collections.Generic.IEnumerable<global::SimpleCompiler.IR.IrNode> DescendantNodesAndSelf(Func<global::SimpleCompiler.IR.IrNode, bool>? descendIntoChildren = null)
        {
            var stack = new Stack<global::SimpleCompiler.IR.IrNode>(24);
            stack.Push(this);

            while (stack.Count > 0)
            {
                var current = stack.Pop();

                yield return current;

                foreach (var child in current.ChildNodes().Reverse())
                {
                    stack.Push(child);
                }
            }
        }
    }
}
