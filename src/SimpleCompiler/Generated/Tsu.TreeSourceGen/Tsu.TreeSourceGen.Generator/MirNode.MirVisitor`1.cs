// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace SimpleCompiler.MIR
{
    interface IMirVisitor<TReturn>
    {
        [return: MaybeNull]
        TReturn VisitAssignment(SimpleCompiler.MIR.Assignment assignment);
        [return: MaybeNull]
        TReturn VisitBinaryOperation(SimpleCompiler.MIR.BinaryOperation binaryOperation);
        [return: MaybeNull]
        TReturn VisitConstant(SimpleCompiler.MIR.Constant constant);
        [return: MaybeNull]
        TReturn VisitDiscard(SimpleCompiler.MIR.Discard discard);
        [return: MaybeNull]
        TReturn VisitExpressionStatement(SimpleCompiler.MIR.ExpressionStatement expressionStatement);
        [return: MaybeNull]
        TReturn VisitFunctionCall(SimpleCompiler.MIR.FunctionCall functionCall);
        [return: MaybeNull]
        TReturn VisitEmptyStatement(SimpleCompiler.MIR.EmptyStatement emptyStatement);
        [return: MaybeNull]
        TReturn VisitStatementList(SimpleCompiler.MIR.StatementList statementList);
        [return: MaybeNull]
        TReturn VisitUnaryOperation(SimpleCompiler.MIR.UnaryOperation unaryOperation);
        [return: MaybeNull]
        TReturn VisitVariable(SimpleCompiler.MIR.Variable variable);
    }
    
    partial class MirVisitor<TReturn> : IMirVisitor<TReturn> 
    {
        [return: MaybeNull]
        public virtual TReturn Visit(SimpleCompiler.MIR.MirNode node)
        {
            if (node is not null)
                return node.Accept(this);
            
            return default;
        }
        
        [return: MaybeNull]
        protected virtual TReturn DefaultVisit(SimpleCompiler.MIR.MirNode node) => default;
        
        [return: MaybeNull]
        public virtual TReturn VisitAssignment(SimpleCompiler.MIR.Assignment assignment) => DefaultVisit(assignment);
        
        [return: MaybeNull]
        public virtual TReturn VisitBinaryOperation(SimpleCompiler.MIR.BinaryOperation binaryOperation) => DefaultVisit(binaryOperation);
        
        [return: MaybeNull]
        public virtual TReturn VisitConstant(SimpleCompiler.MIR.Constant constant) => DefaultVisit(constant);
        
        [return: MaybeNull]
        public virtual TReturn VisitDiscard(SimpleCompiler.MIR.Discard discard) => DefaultVisit(discard);
        
        [return: MaybeNull]
        public virtual TReturn VisitExpressionStatement(SimpleCompiler.MIR.ExpressionStatement expressionStatement) => DefaultVisit(expressionStatement);
        
        [return: MaybeNull]
        public virtual TReturn VisitFunctionCall(SimpleCompiler.MIR.FunctionCall functionCall) => DefaultVisit(functionCall);
        
        [return: MaybeNull]
        public virtual TReturn VisitEmptyStatement(SimpleCompiler.MIR.EmptyStatement emptyStatement) => DefaultVisit(emptyStatement);
        
        [return: MaybeNull]
        public virtual TReturn VisitStatementList(SimpleCompiler.MIR.StatementList statementList) => DefaultVisit(statementList);
        
        [return: MaybeNull]
        public virtual TReturn VisitUnaryOperation(SimpleCompiler.MIR.UnaryOperation unaryOperation) => DefaultVisit(unaryOperation);
        
        [return: MaybeNull]
        public virtual TReturn VisitVariable(SimpleCompiler.MIR.Variable variable) => DefaultVisit(variable);
    }
}
