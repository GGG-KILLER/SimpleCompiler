// <auto-generated />

#nullable enable

namespace SimpleCompiler.LIR;
public enum LirInstrKind
{
    PushVar,
    StoreVar,
    PushCons,
    Pop,
    Ret,
    MultiRet,
    Add,
    Sub,
    Mul,
    Div,
    IntDiv,
    Pow,
    Mod,
}

partial record Instruction
{
    public static partial PushVar PushVar(global::SimpleCompiler.Variable variable) => new(variable);
    public static partial StoreVar StoreVar(global::SimpleCompiler.Variable variable) => new(variable);
    public static partial PushCons PushCons(global::SimpleCompiler.Constant constant) => new(constant);
    public static partial Pop Pop() => global::SimpleCompiler.LIR.Pop.Instance;
    public static partial Ret Ret() => global::SimpleCompiler.LIR.Ret.Instance;
    public static partial MultiRet MultiRet(int count) => new(count);
    public static partial Add Add() => global::SimpleCompiler.LIR.Add.Instance;
    public static partial Sub Sub() => global::SimpleCompiler.LIR.Sub.Instance;
    public static partial Mul Mul() => global::SimpleCompiler.LIR.Mul.Instance;
    public static partial Div Div() => global::SimpleCompiler.LIR.Div.Instance;
    public static partial IntDiv IntDiv() => global::SimpleCompiler.LIR.IntDiv.Instance;
    public static partial Pow Pow() => global::SimpleCompiler.LIR.Pow.Instance;
    public static partial Mod Mod() => global::SimpleCompiler.LIR.Mod.Instance;
}

public sealed partial record PushVar(global::SimpleCompiler.Variable Variable) : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.PushVar);

public sealed partial record StoreVar(global::SimpleCompiler.Variable Variable) : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.StoreVar);

public sealed partial record PushCons(global::SimpleCompiler.Constant Constant) : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.PushCons);

public sealed partial record Pop() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Pop)
{
    public static readonly Pop Instance = new();
}

public sealed partial record Ret() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Ret)
{
    public static readonly Ret Instance = new();
}

public sealed partial record MultiRet(int Count) : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.MultiRet);

public sealed partial record Add() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Add)
{
    public static readonly Add Instance = new();
}

public sealed partial record Sub() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Sub)
{
    public static readonly Sub Instance = new();
}

public sealed partial record Mul() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Mul)
{
    public static readonly Mul Instance = new();
}

public sealed partial record Div() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Div)
{
    public static readonly Div Instance = new();
}

public sealed partial record IntDiv() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.IntDiv)
{
    public static readonly IntDiv Instance = new();
}

public sealed partial record Pow() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Pow)
{
    public static readonly Pow Instance = new();
}

public sealed partial record Mod() : global::SimpleCompiler.LIR.Instruction(global::SimpleCompiler.LIR.LirInstrKind.Mod)
{
    public static readonly Mod Instance = new();
}
